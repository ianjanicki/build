import { z } from 'zod';
import type { Project } from '../types';
import { ProjectComplexity, ProjectScale, ProjectCategory, Currency, ProjectStatus, RequirementType, RequirementLevel, ConstraintType, ConstraintSeverity } from '../types';

// Zod schema for the new Project interface
export const ProjectSchema = z.object({
  version: z.literal('0.0.0'),
  metadata: z.object({
    createdAt: z.number(),
    lastModified: z.number(),
    createdBy: z.string(),
    status: z.nativeEnum(ProjectStatus),
    version: z.string(),
  }),
  project: z.object({
    name: z.string(),
    description: z.string(),
    location: z.object({
      address: z.object({
        street: z.string(),
        city: z.string(),
        state: z.string(),
        zipCode: z.string(),
        country: z.string().optional(),
        coordinates: z.object({
          latitude: z.number(),
          longitude: z.number(),
        }).optional(),
      }),
      access: z.object({
        entryMethod: z.enum(['key', 'code', 'call', 'meet', 'unlocked']),
        entryInstructions: z.string().optional(),
        parkingAvailable: z.boolean(),
        parkingInstructions: z.string().optional(),
        elevatorAccess: z.boolean(),
        floorNumber: z.number().optional(),
        specialAccess: z.string().optional(),
      }),
      siteConditions: z.object({
        indoor: z.boolean(),
        climateControlled: z.boolean(),
        lighting: z.enum(['natural', 'artificial', 'mixed']),
        powerAvailable: z.boolean(),
        waterAvailable: z.boolean(),
        spaceDimensions: z.object({
          width: z.number(),
          length: z.number(),
          height: z.number(),
          unit: z.enum(['feet', 'meters']),
        }).optional(),
        existingStructures: z.array(z.string()).optional(),
        hazards: z.array(z.string()).optional(),
      }),
      constraints: z.array(z.object({
        id: z.string(),
        type: z.enum(['physical', 'regulatory', 'temporal', 'financial', 'environmental', 'safety', 'access']),
        severity: z.enum(['low', 'medium', 'high', 'critical']),
        description: z.string(),
        impact: z.string(),
        mitigation: z.string().optional(),
        verified: z.boolean(),
      })),
    }),
    budget: z.object({
      total: z.object({
        amount: z.number(),
        currency: z.nativeEnum(Currency),
      }),
      allocated: z.object({
        amount: z.number(),
        currency: z.nativeEnum(Currency),
      }),
      spent: z.object({
        amount: z.number(),
        currency: z.nativeEnum(Currency),
      }),
      currency: z.nativeEnum(Currency),
      breakdown: z.array(z.object({
        category: z.enum(['labor', 'materials', 'equipment', 'permits', 'other']),
        estimated: z.object({
          amount: z.number(),
          currency: z.nativeEnum(Currency),
        }),
        actual: z.object({
          amount: z.number(),
          currency: z.nativeEnum(Currency),
        }).optional(),
        description: z.string(),
      })),
    }),
    timeline: z.object({
      startDate: z.number(),
      targetEndDate: z.number(),
      actualEndDate: z.number().optional(),
      milestones: z.array(z.object({
        id: z.string(),
        name: z.string(),
        targetDate: z.number(),
        actualDate: z.number().optional(),
        description: z.string(),
        tasks: z.array(z.string()),
      })),
    }),
  }),
  spec: z.object({
            complexity: z.nativeEnum(ProjectComplexity),
        scale: z.nativeEnum(ProjectScale),
        category: z.nativeEnum(ProjectCategory),
    requirements: z.array(z.object({
      id: z.string(),
      type: z.nativeEnum(RequirementType),
      name: z.string(),
      level: z.nativeEnum(RequirementLevel),
      description: z.string(),
      quantity: z.number().optional(),
      unit: z.string().optional(),
      cost: z.object({
        amount: z.number(),
        currency: z.nativeEnum(Currency),
      }).optional(),
      source: z.string().optional(),
      verified: z.boolean(),
    })),
    constraints: z.array(z.object({
      id: z.string(),
      type: z.nativeEnum(ConstraintType),
      severity: z.nativeEnum(ConstraintSeverity),
      description: z.string(),
      impact: z.string(),
      mitigation: z.string().optional(),
      verified: z.boolean(),
    })),
    properties: z.record(z.any()),
  }),
  policy: z.object({
    humanApprovalPoints: z.array(z.string()),
    riskLevel: z.enum(['low', 'medium', 'high', 'critical']),
    safetyRequirements: z.array(z.object({
      id: z.string(),
      type: z.enum(['ppe', 'training', 'equipment', 'procedure']),
      description: z.string(),
      mandatory: z.boolean(),
      verified: z.boolean(),
    })),
    insuranceRequired: z.boolean(),
    permitsRequired: z.boolean(),
    inspectionsRequired: z.boolean(),
  }),
  state: z.object({
                  currentPhase: z.nativeEnum(ProjectStatus),
    completedTasks: z.array(z.string()),
    currentTask: z.string().optional(),
    blockedTasks: z.array(z.string()),
    executionLog: z.array(z.object({
      id: z.string(),
      timestamp: z.number(),
      taskId: z.string(),
      action: z.enum(['started', 'completed', 'failed', 'paused', 'resumed']),
      description: z.string(),
      evidence: z.array(z.string()).optional(),
      worker: z.string().optional(),
      duration: z.number().optional(),
    })),
    estimates: z.object({
      totalHours: z.number(),
      totalCost: z.object({
        amount: z.number(),
        currency: z.nativeEnum(Currency),
      }),
              perTask: z.record(z.object({
          hours: z.number(),
          cost: z.object({
            amount: z.number(),
            currency: z.nativeEnum(Currency),
          }),
        })),
      lastUpdated: z.number(),
    }),
    skillTiers: z.object({
      basic: z.object({
        amount: z.number(),
        currency: z.nativeEnum(Currency),
      }),
      intermediate: z.object({
        amount: z.number(),
        currency: z.nativeEnum(Currency),
      }),
      advanced: z.object({
        amount: z.number(),
        currency: z.nativeEnum(Currency),
      }),
      expert: z.object({
        amount: z.number(),
        currency: z.nativeEnum(Currency),
      }),
      lastUpdated: z.number(),
    }),
    approvals: z.array(z.object({
      id: z.string(),
      type: z.enum(['plan', 'labor_hire', 'purchase', 'safety', 'permit']),
      requestedAt: z.number(),
      requestedBy: z.string(),
      approvedAt: z.number().optional(),
      approvedBy: z.string().optional(),
      status: z.enum(['pending', 'approved', 'rejected']),
      description: z.string(),
      amount: z.object({
        amount: z.number(),
        currency: z.nativeEnum(Currency),
      }).optional(),
    })),
    issues: z.array(z.object({
      id: z.string(),
      severity: z.enum(['low', 'medium', 'high', 'critical']),
      description: z.string(),
      reportedAt: z.number(),
      reportedBy: z.string(),
      resolvedAt: z.number().optional(),
      resolvedBy: z.string().optional(),
      status: z.enum(['open', 'in_progress', 'resolved', 'closed']),
      affectedTasks: z.array(z.string()),
      resolution: z.string().optional(),
    })),
  }),
  plan: z.object({
    tasks: z.array(z.object({
      id: z.string(),
      name: z.string(),
      description: z.string(),
      status: z.enum(['pending', 'in_progress', 'completed', 'failed', 'blocked', 'cancelled']),
      priority: z.enum(['low', 'medium', 'high', 'critical']),
      estimatedHours: z.number(),
      actualHours: z.number().optional(),
      startTime: z.number().optional(),
      endTime: z.number().optional(),
      estimatedCost: z.object({
        amount: z.number(),
        currency: z.nativeEnum(Currency),
      }),
      actualCost: z.object({
        amount: z.number(),
        currency: z.nativeEnum(Currency),
      }).optional(),
      skills: z.array(z.string()),
      materials: z.array(z.object({
        id: z.string(),
        name: z.string(),
        quantity: z.number(),
        unit: z.string(),
        cost: z.object({
          amount: z.number(),
          currency: z.nativeEnum(Currency),
        }),
        source: z.string(),
        status: z.enum(['needed', 'ordered', 'received', 'used']),
      })),
      tools: z.array(z.object({
        id: z.string(),
        name: z.string(),
        required: z.boolean(),
        provided: z.boolean(),
        source: z.string(),
        status: z.enum(['needed', 'available', 'in_use', 'returned']),
      })),
      safetyRequirements: z.array(z.string()),
      dependsOn: z.array(z.string()),
      blocks: z.array(z.string()),
      assignedTo: z.string().optional(),
      location: z.string().optional(),
      instructions: z.string(),
      checkpoints: z.array(z.object({
        id: z.string(),
        name: z.string(),
        description: z.string(),
        completed: z.boolean(),
        completedAt: z.number().optional(),
        completedBy: z.string().optional(),
        evidence: z.array(z.string()).optional(),
      })),
      progress: z.number(),
      notes: z.array(z.object({
        id: z.string(),
        timestamp: z.number(),
        author: z.string(),
        content: z.string(),
        type: z.enum(['info', 'warning', 'error', 'success']),
      })),
      evidence: z.array(z.string()),
    })),
    dependencies: z.array(z.object({
      id: z.string(),
      from: z.string(),
      to: z.string(),
      type: z.enum(['finish_to_start', 'start_to_start', 'finish_to_finish', 'start_to_finish']),
      lag: z.number().optional(),
    })),
    criticalPath: z.array(z.string()),
    estimatedDuration: z.number(),
    estimatedCost: z.object({
      amount: z.number(),
      currency: z.nativeEnum(Currency),
    }),
    generatedAt: z.number(),
  }),
});

export type ProjectType = z.infer<typeof ProjectSchema>;
